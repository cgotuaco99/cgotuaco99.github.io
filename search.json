[
  {
    "objectID": "posts/NBASQL/2022-11-09-NBA_SQL_Analysis.html",
    "href": "posts/NBASQL/2022-11-09-NBA_SQL_Analysis.html",
    "title": "NBA SQL Analysis",
    "section": "",
    "text": "In this project, I’ll see if I can identify when NBA players have tended to reach their primes. I will be running SQL commands through pandasql in Python.\nThe first step is to download the data and do some exploratory data analysis.\n\n%reset -f \nimport pandas as pd\nimport pandasql as ps\n\nHere I load CSV files containing info on individual players and season-long statistics.\n\nPlayers = pd.read_csv(\"/Users/christophergotuaco/Desktop/NBAFolder/Players.csv\")\nSeasonsStats = pd.read_csv(\"/Users/christophergotuaco/Desktop/NBAFolder/Seasons_Stats.csv\")\nPlayerData = pd.read_csv(\"/Users/christophergotuaco/Desktop/NBAFolder/player_data.csv\")\n\nFor this project I’ll look at Player Efficiency Rating, or PER. I’ll sort from the Season Statistics table by highest to lowest of all time.\n\nps.sqldf(\"\"\"SELECT *\n            FROM SeasonsStats\n            ORDER BY PER DESC\n            LIMIT 15;\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      Unnamed: 0\n      Year\n      Player\n      Pos\n      Age\n      Tm\n      G\n      GS\n      MP\n      PER\n      ...\n      FT%\n      ORB\n      DRB\n      TRB\n      AST\n      STL\n      BLK\n      TOV\n      PF\n      PTS\n    \n  \n  \n    \n      0\n      22600\n      2014.0\n      DeAndre Liggins\n      SG\n      25.0\n      MIA\n      1.0\n      0.0\n      1.0\n      129.1\n      ...\n      NaN\n      1.0\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      2.0\n    \n    \n      1\n      17164\n      2005.0\n      Jackie Butler\n      C\n      19.0\n      NYK\n      3.0\n      0.0\n      5.0\n      90.3\n      ...\n      1.000\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n      10.0\n    \n    \n      2\n      19581\n      2009.0\n      Steven Hill\n      PF\n      23.0\n      OKC\n      1.0\n      0.0\n      2.0\n      88.3\n      ...\n      NaN\n      2.0\n      1.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      2.0\n    \n    \n      3\n      2422\n      1967.0\n      George Lee\n      F-G\n      30.0\n      SFW\n      1.0\n      NaN\n      5.0\n      77.0\n      ...\n      0.857\n      NaN\n      NaN\n      0.0\n      0.0\n      NaN\n      NaN\n      NaN\n      0.0\n      12.0\n    \n    \n      4\n      10244\n      1991.0\n      Ian Lockhart\n      SF\n      23.0\n      PHO\n      1.0\n      0.0\n      2.0\n      76.3\n      ...\n      1.000\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      4.0\n    \n    \n      5\n      18952\n      2008.0\n      Gerald Green\n      SF\n      22.0\n      HOU\n      1.0\n      0.0\n      4.0\n      76.3\n      ...\n      NaN\n      2.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      0.0\n      2.0\n      6.0\n    \n    \n      6\n      14439\n      1999.0\n      Tyson Wheeler\n      PG\n      23.0\n      DEN\n      1.0\n      0.0\n      3.0\n      76.1\n      ...\n      0.500\n      0.0\n      0.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      1.0\n      4.0\n    \n    \n      7\n      11194\n      1993.0\n      Alan Ogg\n      C\n      25.0\n      WSB\n      3.0\n      0.0\n      3.0\n      67.9\n      ...\n      0.500\n      2.0\n      2.0\n      4.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n    \n    \n      8\n      3020\n      1970.0\n      Dave Scholz\n      F\n      21.0\n      PHI\n      1.0\n      NaN\n      1.0\n      67.6\n      ...\n      NaN\n      NaN\n      NaN\n      0.0\n      0.0\n      NaN\n      NaN\n      NaN\n      0.0\n      2.0\n    \n    \n      9\n      11510\n      1994.0\n      Chad Gallagher\n      C\n      24.0\n      UTA\n      2.0\n      0.0\n      3.0\n      66.8\n      ...\n      NaN\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      2.0\n      6.0\n    \n    \n      10\n      12554\n      1996.0\n      Cedric Lewis\n      C\n      26.0\n      WSB\n      3.0\n      0.0\n      4.0\n      62.7\n      ...\n      NaN\n      2.0\n      0.0\n      2.0\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n      4.0\n    \n    \n      11\n      8517\n      1987.0\n      Cozell McQueen\n      PF\n      25.0\n      DET\n      3.0\n      0.0\n      7.0\n      58.3\n      ...\n      NaN\n      3.0\n      5.0\n      8.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      6.0\n    \n    \n      12\n      19904\n      2009.0\n      Marcus Williams\n      PF\n      22.0\n      SAS\n      2.0\n      0.0\n      3.0\n      53.0\n      ...\n      NaN\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      4.0\n    \n    \n      13\n      23681\n      2016.0\n      Jimmer Fredette\n      SG\n      26.0\n      NYK\n      2.0\n      0.0\n      5.0\n      47.4\n      ...\n      0.800\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      1.0\n      7.0\n    \n    \n      14\n      11680\n      1994.0\n      Chuck Nevitt\n      C\n      34.0\n      SAS\n      1.0\n      0.0\n      1.0\n      46.0\n      ...\n      0.500\n      1.0\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n      1.0\n      1.0\n      3.0\n    \n  \n\n15 rows × 53 columns\n\n\n\nAs formulated, the league average PER will always be 15.00, so it seems there are some obvious outliers here, and many of the names we see are probabaly unfamiliar to even diehard NBA fans.\nWe can get rid of these outliers by specficing minimums in stats such as games played. The NBA has a requirement for its league leaders in multiple stats: 70% of team games, or 58 games played in an 82 game season. (https://nba.nbcsports.com/2022/05/19/adam-silver-nba-to-consider-games-played-minimum-for-awards/)\n\nps.sqldf(\"\"\"SELECT *\n            FROM SeasonsStats\n            WHERE G >= 58\n            ORDER BY PER DESC\n            LIMIT 15;\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      Unnamed: 0\n      Year\n      Player\n      Pos\n      Age\n      Tm\n      G\n      GS\n      MP\n      PER\n      ...\n      FT%\n      ORB\n      DRB\n      TRB\n      AST\n      STL\n      BLK\n      TOV\n      PF\n      PTS\n    \n  \n  \n    \n      0\n      1827\n      1963.0\n      Wilt Chamberlain*\n      C\n      26.0\n      SFW\n      80.0\n      NaN\n      3806.0\n      31.8\n      ...\n      0.593\n      NaN\n      NaN\n      1946.0\n      275.0\n      NaN\n      NaN\n      NaN\n      136.0\n      3586.0\n    \n    \n      1\n      1706\n      1962.0\n      Wilt Chamberlain*\n      C\n      25.0\n      PHW\n      80.0\n      NaN\n      3882.0\n      31.7\n      ...\n      0.613\n      NaN\n      NaN\n      2052.0\n      192.0\n      NaN\n      NaN\n      NaN\n      123.0\n      4029.0\n    \n    \n      2\n      8869\n      1988.0\n      Michael Jordan*\n      SG\n      24.0\n      CHI\n      82.0\n      82.0\n      3311.0\n      31.7\n      ...\n      0.841\n      139.0\n      310.0\n      449.0\n      485.0\n      259.0\n      131.0\n      252.0\n      270.0\n      2868.0\n    \n    \n      3\n      19611\n      2009.0\n      LeBron James\n      SF\n      24.0\n      CLE\n      81.0\n      81.0\n      3054.0\n      31.7\n      ...\n      0.780\n      106.0\n      507.0\n      613.0\n      587.0\n      137.0\n      93.0\n      241.0\n      139.0\n      2304.0\n    \n    \n      4\n      1962\n      1964.0\n      Wilt Chamberlain*\n      C\n      27.0\n      SFW\n      80.0\n      NaN\n      3689.0\n      31.6\n      ...\n      0.531\n      NaN\n      NaN\n      1787.0\n      403.0\n      NaN\n      NaN\n      NaN\n      182.0\n      2948.0\n    \n    \n      5\n      10212\n      1991.0\n      Michael Jordan*\n      SG\n      27.0\n      CHI\n      82.0\n      82.0\n      3034.0\n      31.6\n      ...\n      0.851\n      118.0\n      374.0\n      492.0\n      453.0\n      223.0\n      83.0\n      202.0\n      229.0\n      2580.0\n    \n    \n      6\n      21933\n      2013.0\n      LeBron James\n      PF\n      28.0\n      MIA\n      76.0\n      76.0\n      2877.0\n      31.6\n      ...\n      0.753\n      97.0\n      513.0\n      610.0\n      551.0\n      129.0\n      67.0\n      226.0\n      110.0\n      2036.0\n    \n    \n      7\n      23633\n      2016.0\n      Stephen Curry\n      PG\n      27.0\n      GSW\n      79.0\n      79.0\n      2700.0\n      31.5\n      ...\n      0.908\n      68.0\n      362.0\n      430.0\n      527.0\n      169.0\n      15.0\n      262.0\n      161.0\n      2375.0\n    \n    \n      8\n      9747\n      1990.0\n      Michael Jordan*\n      SG\n      26.0\n      CHI\n      82.0\n      82.0\n      3197.0\n      31.2\n      ...\n      0.848\n      143.0\n      422.0\n      565.0\n      519.0\n      227.0\n      54.0\n      247.0\n      241.0\n      2753.0\n    \n    \n      9\n      9297\n      1989.0\n      Michael Jordan*\n      SG\n      25.0\n      CHI\n      81.0\n      81.0\n      3255.0\n      31.1\n      ...\n      0.850\n      149.0\n      503.0\n      652.0\n      650.0\n      234.0\n      65.0\n      290.0\n      247.0\n      2633.0\n    \n    \n      10\n      20207\n      2010.0\n      LeBron James\n      SF\n      25.0\n      CLE\n      76.0\n      76.0\n      2966.0\n      31.1\n      ...\n      0.767\n      71.0\n      483.0\n      554.0\n      651.0\n      125.0\n      77.0\n      261.0\n      119.0\n      2258.0\n    \n    \n      11\n      23012\n      2015.0\n      Anthony Davis\n      PF\n      21.0\n      NOP\n      68.0\n      68.0\n      2455.0\n      30.8\n      ...\n      0.805\n      173.0\n      523.0\n      696.0\n      149.0\n      100.0\n      200.0\n      95.0\n      141.0\n      1656.0\n    \n    \n      12\n      11731\n      1994.0\n      David Robinson*\n      C\n      28.0\n      SAS\n      80.0\n      80.0\n      3241.0\n      30.7\n      ...\n      0.749\n      241.0\n      614.0\n      855.0\n      381.0\n      139.0\n      265.0\n      253.0\n      228.0\n      2383.0\n    \n    \n      13\n      21395\n      2012.0\n      LeBron James\n      SF\n      27.0\n      MIA\n      62.0\n      62.0\n      2326.0\n      30.7\n      ...\n      0.771\n      94.0\n      398.0\n      492.0\n      387.0\n      115.0\n      50.0\n      213.0\n      96.0\n      1683.0\n    \n    \n      14\n      14806\n      2000.0\n      Shaquille O'Neal*\n      C\n      27.0\n      LAL\n      79.0\n      79.0\n      3163.0\n      30.6\n      ...\n      0.524\n      336.0\n      742.0\n      1078.0\n      299.0\n      36.0\n      239.0\n      223.0\n      255.0\n      2344.0\n    \n  \n\n15 rows × 53 columns\n\n\n\nThese players make a bit more sense. Now let’s see if we can figure out how to quantify when player’s primes begin and end.\nWe will use the SeasonsStats table to get the max PER year for each unique player, and then take average of the age for each:\n\nnewdf = ps.sqldf(\"\"\"SELECT *\n            FROM SeasonsStats\n            WHERE G >= 58\n            ORDER BY PER DESC;\n            \"\"\")\n\n\nps.sqldf(\"\"\"SELECT Player, MAX(PER), Year, Age\n            FROM newdf\n            GROUP BY Player\n            ORDER BY MAX(PER) DESC\n            LIMIT 15;\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      Player\n      MAX(PER)\n      Year\n      Age\n    \n  \n  \n    \n      0\n      Wilt Chamberlain*\n      31.8\n      1963.0\n      26.0\n    \n    \n      1\n      Michael Jordan*\n      31.7\n      1988.0\n      24.0\n    \n    \n      2\n      LeBron James\n      31.7\n      2009.0\n      24.0\n    \n    \n      3\n      Stephen Curry\n      31.5\n      2016.0\n      27.0\n    \n    \n      4\n      Anthony Davis\n      30.8\n      2015.0\n      21.0\n    \n    \n      5\n      David Robinson*\n      30.7\n      1994.0\n      28.0\n    \n    \n      6\n      Shaquille O'Neal*\n      30.6\n      2000.0\n      27.0\n    \n    \n      7\n      Russell Westbrook\n      30.6\n      2017.0\n      28.0\n    \n    \n      8\n      Dwyane Wade\n      30.4\n      2009.0\n      27.0\n    \n    \n      9\n      Tracy McGrady\n      30.3\n      2003.0\n      23.0\n    \n    \n      10\n      Chris Paul\n      30.0\n      2009.0\n      23.0\n    \n    \n      11\n      Kareem Abdul-Jabbar*\n      29.9\n      1972.0\n      24.0\n    \n    \n      12\n      Kevin Durant\n      29.8\n      2014.0\n      25.0\n    \n    \n      13\n      Kevin Garnett\n      29.4\n      2004.0\n      27.0\n    \n    \n      14\n      Karl Malone*\n      28.9\n      1997.0\n      33.0\n    \n  \n\n\n\n\nOne issue I came across was the inclusion of the asterisk in players’ names, which means that the player was inducted into the Basketball Hall of Fame. Asterisks only appear in the SeasonStats and Player datasets.\n\nps.sqldf(\"\"\"SELECT *\n            FROM SeasonsStats\n            WHERE Player = 'Gary Payton*';\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      Unnamed: 0\n      Year\n      Player\n      Pos\n      Age\n      Tm\n      G\n      GS\n      MP\n      PER\n      ...\n      FT%\n      ORB\n      DRB\n      TRB\n      AST\n      STL\n      BLK\n      TOV\n      PF\n      PTS\n    \n  \n  \n    \n      0\n      10301\n      1991.0\n      Gary Payton*\n      PG\n      22.0\n      SEA\n      82.0\n      82.0\n      2244.0\n      13.2\n      ...\n      0.711\n      108.0\n      135.0\n      243.0\n      528.0\n      165.0\n      15.0\n      180.0\n      249.0\n      588.0\n    \n    \n      1\n      10758\n      1992.0\n      Gary Payton*\n      PG\n      23.0\n      SEA\n      81.0\n      79.0\n      2549.0\n      13.1\n      ...\n      0.669\n      123.0\n      172.0\n      295.0\n      506.0\n      147.0\n      21.0\n      174.0\n      248.0\n      764.0\n    \n    \n      2\n      11205\n      1993.0\n      Gary Payton*\n      PG\n      24.0\n      SEA\n      82.0\n      78.0\n      2548.0\n      17.0\n      ...\n      0.770\n      95.0\n      186.0\n      281.0\n      399.0\n      177.0\n      21.0\n      148.0\n      250.0\n      1110.0\n    \n    \n      3\n      11700\n      1994.0\n      Gary Payton*\n      PG\n      25.0\n      SEA\n      82.0\n      82.0\n      2881.0\n      17.8\n      ...\n      0.595\n      105.0\n      164.0\n      269.0\n      494.0\n      188.0\n      19.0\n      173.0\n      227.0\n      1349.0\n    \n    \n      4\n      12145\n      1995.0\n      Gary Payton*\n      PG\n      26.0\n      SEA\n      82.0\n      82.0\n      3015.0\n      21.3\n      ...\n      0.716\n      108.0\n      173.0\n      281.0\n      583.0\n      204.0\n      13.0\n      201.0\n      206.0\n      1689.0\n    \n    \n      5\n      12646\n      1996.0\n      Gary Payton*\n      PG\n      27.0\n      SEA\n      81.0\n      81.0\n      3162.0\n      19.6\n      ...\n      0.748\n      104.0\n      235.0\n      339.0\n      608.0\n      231.0\n      19.0\n      260.0\n      221.0\n      1563.0\n    \n    \n      6\n      13234\n      1997.0\n      Gary Payton*\n      PG\n      28.0\n      SEA\n      82.0\n      82.0\n      3213.0\n      21.8\n      ...\n      0.715\n      106.0\n      272.0\n      378.0\n      583.0\n      197.0\n      13.0\n      215.0\n      208.0\n      1785.0\n    \n    \n      7\n      13758\n      1998.0\n      Gary Payton*\n      PG\n      29.0\n      SEA\n      82.0\n      82.0\n      3145.0\n      21.6\n      ...\n      0.744\n      77.0\n      299.0\n      376.0\n      679.0\n      185.0\n      18.0\n      229.0\n      195.0\n      1571.0\n    \n    \n      8\n      14312\n      1999.0\n      Gary Payton*\n      PG\n      30.0\n      SEA\n      50.0\n      50.0\n      2008.0\n      23.1\n      ...\n      0.721\n      62.0\n      182.0\n      244.0\n      436.0\n      109.0\n      12.0\n      154.0\n      115.0\n      1084.0\n    \n    \n      9\n      14825\n      2000.0\n      Gary Payton*\n      PG\n      31.0\n      SEA\n      82.0\n      82.0\n      3425.0\n      23.6\n      ...\n      0.735\n      100.0\n      429.0\n      529.0\n      732.0\n      153.0\n      18.0\n      224.0\n      178.0\n      1982.0\n    \n    \n      10\n      15354\n      2001.0\n      Gary Payton*\n      PG\n      32.0\n      SEA\n      79.0\n      79.0\n      3244.0\n      22.1\n      ...\n      0.766\n      73.0\n      288.0\n      361.0\n      642.0\n      127.0\n      26.0\n      209.0\n      184.0\n      1823.0\n    \n    \n      11\n      15864\n      2002.0\n      Gary Payton*\n      PG\n      33.0\n      SEA\n      82.0\n      82.0\n      3301.0\n      22.9\n      ...\n      0.797\n      80.0\n      316.0\n      396.0\n      737.0\n      131.0\n      26.0\n      209.0\n      179.0\n      1815.0\n    \n    \n      12\n      16345\n      2003.0\n      Gary Payton*\n      PG\n      34.0\n      TOT\n      80.0\n      80.0\n      3208.0\n      21.1\n      ...\n      0.710\n      79.0\n      255.0\n      334.0\n      663.0\n      133.0\n      20.0\n      187.0\n      181.0\n      1634.0\n    \n    \n      13\n      16346\n      2003.0\n      Gary Payton*\n      PG\n      34.0\n      SEA\n      52.0\n      52.0\n      2123.0\n      21.4\n      ...\n      0.692\n      56.0\n      192.0\n      248.0\n      457.0\n      93.0\n      12.0\n      131.0\n      117.0\n      1084.0\n    \n    \n      14\n      16347\n      2003.0\n      Gary Payton*\n      PG\n      34.0\n      MIL\n      28.0\n      28.0\n      1085.0\n      20.5\n      ...\n      0.746\n      23.0\n      63.0\n      86.0\n      206.0\n      40.0\n      8.0\n      56.0\n      64.0\n      550.0\n    \n    \n      15\n      16898\n      2004.0\n      Gary Payton*\n      PG\n      35.0\n      LAL\n      82.0\n      82.0\n      2825.0\n      17.3\n      ...\n      0.714\n      72.0\n      270.0\n      342.0\n      449.0\n      96.0\n      19.0\n      151.0\n      169.0\n      1199.0\n    \n    \n      16\n      17481\n      2005.0\n      Gary Payton*\n      PG\n      36.0\n      BOS\n      77.0\n      77.0\n      2541.0\n      15.1\n      ...\n      0.761\n      48.0\n      188.0\n      236.0\n      469.0\n      88.0\n      12.0\n      148.0\n      121.0\n      873.0\n    \n    \n      17\n      18054\n      2006.0\n      Gary Payton*\n      PG\n      37.0\n      MIA\n      81.0\n      25.0\n      2305.0\n      10.7\n      ...\n      0.794\n      34.0\n      199.0\n      233.0\n      257.0\n      71.0\n      10.0\n      102.0\n      169.0\n      626.0\n    \n    \n      18\n      18592\n      2007.0\n      Gary Payton*\n      PG\n      38.0\n      MIA\n      68.0\n      28.0\n      1503.0\n      9.0\n      ...\n      0.667\n      18.0\n      114.0\n      132.0\n      201.0\n      43.0\n      3.0\n      66.0\n      117.0\n      358.0\n    \n  \n\n19 rows × 53 columns\n\n\n\nBelow we see there are some errors in names: the Gary Payton born in 1992 is actually Gary Payton II. This caused problems in other cases. One example is two players named David Lee, one who played in 1968, and one who started in 2006. This caused issues when joining data.\n\nps.sqldf(\"\"\"SELECT *\n            FROM PlayerData\n            WHERE name = 'Gary Payton';\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      name\n      year_start\n      year_end\n      position\n      height\n      weight\n      birth_date\n      college\n    \n  \n  \n    \n      0\n      Gary Payton\n      1991\n      2007\n      G\n      6-4\n      180.0\n      July 23, 1968\n      Oregon State University\n    \n    \n      1\n      Gary Payton\n      2017\n      2018\n      G\n      6-3\n      190.0\n      December 1, 1992\n      Oregon State University\n    \n  \n\n\n\n\n\nps.sqldf(\"\"\"SELECT *\n            FROM PlayerData\n            WHERE name = 'David Lee';\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      name\n      year_start\n      year_end\n      position\n      height\n      weight\n      birth_date\n      college\n    \n  \n  \n    \n      0\n      David Lee\n      1968\n      1969\n      F\n      6-7\n      225.0\n      March 31, 1942\n      University of San Francisco\n    \n    \n      1\n      David Lee\n      2006\n      2017\n      F\n      6-9\n      245.0\n      April 29, 1983\n      University of Florida\n    \n  \n\n\n\n\nLet’s also take out the asterisk from SeasonStats, which also caused issues in joining data.\n\nSeason2 = ps.sqldf(\"\"\"SELECT REPLACE(Player, '*', '') AS Player_name, *\n            FROM SeasonsStats\"\"\")\n\nTo fix the duplicate name problem, we join SeasonStats and PlayerData on the conidition that the player’s season year is within their career span.\n\njoindf_total = ps.sqldf(\"\"\"SELECT *\n            FROM Season2 AS s\n            LEFT JOIN PlayerData as p\n            ON s.Player_name = p.name\n            WHERE (s.Year BETWEEN p.year_start AND p.year_end);\n            \"\"\")\n\nHere we make a new column for the span of the player’s career.\n\nyearinc = ps.sqldf(\"\"\"SELECT (Year - year_start), *\n            FROM joindf_total;\n            \"\"\")\n\n\nps.sqldf(\"\"\"SELECT name, year, year_start, year_end\n            FROM joindf_total\n            WHERE name = 'Gary Payton';\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      name\n      Year\n      year_start\n      year_end\n    \n  \n  \n    \n      0\n      Gary Payton\n      1991.0\n      1991\n      2007\n    \n    \n      1\n      Gary Payton\n      1992.0\n      1991\n      2007\n    \n    \n      2\n      Gary Payton\n      1993.0\n      1991\n      2007\n    \n    \n      3\n      Gary Payton\n      1994.0\n      1991\n      2007\n    \n    \n      4\n      Gary Payton\n      1995.0\n      1991\n      2007\n    \n    \n      5\n      Gary Payton\n      1996.0\n      1991\n      2007\n    \n    \n      6\n      Gary Payton\n      1997.0\n      1991\n      2007\n    \n    \n      7\n      Gary Payton\n      1998.0\n      1991\n      2007\n    \n    \n      8\n      Gary Payton\n      1999.0\n      1991\n      2007\n    \n    \n      9\n      Gary Payton\n      2000.0\n      1991\n      2007\n    \n    \n      10\n      Gary Payton\n      2001.0\n      1991\n      2007\n    \n    \n      11\n      Gary Payton\n      2002.0\n      1991\n      2007\n    \n    \n      12\n      Gary Payton\n      2003.0\n      1991\n      2007\n    \n    \n      13\n      Gary Payton\n      2003.0\n      1991\n      2007\n    \n    \n      14\n      Gary Payton\n      2003.0\n      1991\n      2007\n    \n    \n      15\n      Gary Payton\n      2004.0\n      1991\n      2007\n    \n    \n      16\n      Gary Payton\n      2005.0\n      1991\n      2007\n    \n    \n      17\n      Gary Payton\n      2006.0\n      1991\n      2007\n    \n    \n      18\n      Gary Payton\n      2007.0\n      1991\n      2007\n    \n    \n      19\n      Gary Payton\n      2017.0\n      2017\n      2018\n    \n  \n\n\n\n\nNow we will attempt to determine when players reach their primes using PER as our measure.\n\nPER_test = ps.sqldf(\"\"\"SELECT Player_name, Pos, MAX(PER) AS max_per, Year, Age, year_start, (Year-year_start) AS years_exp\n            FROM yearinc\n            WHERE G >= 58\n            GROUP BY Player\n            ORDER BY MAX(PER) DESC\n            LIMIT 300;\n            \"\"\")\n\nNow we calculate the average age at which players’ peak PERs are reached per position.\n\nps.sqldf(\"\"\"SELECT AVG(Age)\n            FROM PER_test\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      AVG(Age)\n    \n  \n  \n    \n      0\n      26.17\n    \n  \n\n\n\n\n\nps.sqldf(\"\"\"SELECT AVG(Age), AVG(years_exp)\n            FROM PER_test\n            WHERE Pos = 'PG'\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      AVG(Age)\n      AVG(years_exp)\n    \n  \n  \n    \n      0\n      26.627119\n      5.033898\n    \n  \n\n\n\n\n\nps.sqldf(\"\"\"SELECT AVG(Age), AVG(years_exp)\n            FROM PER_test\n            WHERE Pos = 'SG'\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      AVG(Age)\n      AVG(years_exp)\n    \n  \n  \n    \n      0\n      26.333333\n      4.538462\n    \n  \n\n\n\n\n\nps.sqldf(\"\"\"SELECT AVG(Age), AVG(years_exp)\n            FROM PER_test\n            WHERE Pos = 'SF'\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      AVG(Age)\n      AVG(years_exp)\n    \n  \n  \n    \n      0\n      26.163636\n      4.563636\n    \n  \n\n\n\n\n\nps.sqldf(\"\"\"SELECT AVG(Age), AVG(years_exp)\n            FROM PER_test\n            WHERE Pos = 'PF'\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      AVG(Age)\n      AVG(years_exp)\n    \n  \n  \n    \n      0\n      25.949153\n      4.745763\n    \n  \n\n\n\n\n\nps.sqldf(\"\"\"SELECT AVG(Age), AVG(years_exp)\n            FROM PER_test\n            WHERE Pos = 'C'\n            \"\"\")\n\n\n\n\n\n  \n    \n      \n      AVG(Age)\n      AVG(years_exp)\n    \n  \n  \n    \n      0\n      25.943182\n      4.193182\n    \n  \n\n\n\n\nWe see that players who play positions that tend to be taller and heavier peak with slightly fewer years of experience. All players seem to reach their peak PER year around the ages of 26 and 27.\nSimilar calculations can be done using other commonly used statistics, such as Box Plus/Minus (BPM) and Win Shares (WS)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cgotuaco99.github.io",
    "section": "",
    "text": "NBA SQL Analysis\n\n\n\n\n\n\n\nSQL\n\n\nPython\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nChris Gotuaco\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]